/**
* @brief This defines the bytecode instructions used by the VM.
*
* The first argument is the name of the opcode. The second is its "stack
* effect" -- the amount that the op code changes the size of the stack. A
* stack effect of 1 means it pushes a value and the stack grows one larger.
* -2 means it pops two values, etc.
*/

/**
* @brief Load the constant at index [arg].
*/
CODE_CONSTANT,// 1
/**
* @brief Push null onto the stack.
*/
CODE_NULL,// 1
/**
* @brief Push false onto the stack.
*/
CODE_FALSE,// 1
/**
* @brief Push true onto the stack.
*/
CODE_TRUE,// 1
/**
* @brief Pushes the value in the given local slot.
*/
CODE_LOAD_LOCAL_0,// 1
CODE_LOAD_LOCAL_1,// 1
CODE_LOAD_LOCAL_2,// 1
CODE_LOAD_LOCAL_3,// 1
CODE_LOAD_LOCAL_4,// 1
CODE_LOAD_LOCAL_5,// 1
CODE_LOAD_LOCAL_6,// 1
CODE_LOAD_LOCAL_7,// 1
CODE_LOAD_LOCAL_8,// 1

/**
* @brief Note: The compiler assumes the following _STORE instructions always
* immediately follow their corresponding _LOAD ones.
*/

/**
* @brief Pushes the value in local slot [arg].
*/
CODE_LOAD_LOCAL,// 1
/**
* @brief Stores the top of stack in local slot [arg]. Does not pop it.
*/
CODE_STORE_LOCAL,// 0
/**
* @brief Pushes the value in upvalue [arg].
*/
CODE_LOAD_UPVALUE,// 1
/**
* @brief Stores the top of stack in upvalue [arg]. Does not pop it.
*/
CODE_STORE_UPVALUE,// 0
/**
* @brief Pushes the value of the top-level variable in slot [arg].
*/
CODE_LOAD_MODULE_VAR,// 1
/**
* @brief Stores the top of stack in top-level variable slot [arg]. Does not pop it.
*/
CODE_STORE_MODULE_VAR,// 0
/**
* @brief Pushes the value of the field in slot [arg] of the receiver of the current
* function. This is used for regular field accesses on "this" directly in
* methods. This instruction is faster than the more general CODE_LOAD_FIELD
* instruction.
*/
CODE_LOAD_FIELD_THIS,// 1
/**
* @brief Stores the top of the stack in field slot [arg] in the receiver of the
* current value. Does not pop the value. This instruction is faster than the
* more general CODE_LOAD_FIELD instruction.
*/
CODE_STORE_FIELD_THIS,// 0
/**
* @brief Pops an instance and pushes the value of the field in slot [arg] of it.
*/
CODE_LOAD_FIELD,// 0
/**
* @brief Pops an instance and stores the subsequent top of stack in field slot
* [arg] in it. Does not pop the value.
*/
CODE_STORE_FIELD,// -1
/**
* @brief Pop and discard the top of stack.
*/
CODE_POP,// -1
/**
* @brief Invoke the method with symbol [arg]. The number indicates the number of
* arguments (not including the receiver).
* @see vm/common.hpp -> max_parameters
*/
CODE_CALL_0, // 0
CODE_CALL_1, // -1
CODE_CALL_2, // -2
CODE_CALL_3, // -3
CODE_CALL_4, // -4
CODE_CALL_5, // -5
CODE_CALL_6, // -6
CODE_CALL_7, // -7
CODE_CALL_8, // -8
CODE_CALL_9, // -9
CODE_CALL_10,// -10
CODE_CALL_11,// -11
CODE_CALL_12,// -12
CODE_CALL_13,// -13
CODE_CALL_14,// -14
CODE_CALL_15,// -15
CODE_CALL_16,// -16
/**
* @brief Invoke a superclass method with symbol [arg]. The number indicates the
* number of arguments (not including the receiver).
* @see vm/common.hpp -> max_parameters
*/
CODE_SUPER_0, // 0
CODE_SUPER_1, // -1
CODE_SUPER_2, // -2
CODE_SUPER_3, // -3
CODE_SUPER_4, // -4
CODE_SUPER_5, // -5
CODE_SUPER_6, // -6
CODE_SUPER_7, // -7
CODE_SUPER_8, // -8
CODE_SUPER_9, // -9
CODE_SUPER_10,// -10
CODE_SUPER_11,// -11
CODE_SUPER_12,// -12
CODE_SUPER_13,// -13
CODE_SUPER_14,// -14
CODE_SUPER_15,// -15
CODE_SUPER_16,// -16
/**
* @brief Jump the instruction pointer [arg] forward.
*/
CODE_JUMP,// 0
/**
* @brief Jump the instruction pointer [arg] backward.
*/
CODE_LOOP,// 0
/**
* @brief Pop and if not truthy then jump the instruction pointer [arg] forward.
*/
CODE_JUMP_IF,// -1
/**
* @brief If the top of the stack is false, jump [arg] forward. Otherwise, pop and
* continue.
*/
CODE_AND,// -1
/**
* @brief If the top of the stack is non-false, jump [arg] forward. Otherwise, pop
* and continue.
*/
CODE_OR,// -1
/**
* @brief Close the upvalue for the local on the top of the stack, then pop it.
*/
CODE_CLOSE_UPVALUE,// -1
/**
* @brief Exit from the current function and return the value on the top of the
* stack.
*/
CODE_RETURN,// 0
/**
* @brief Creates a closure for the function stored at [arg] in the constant table.
*
* Following the function argument is a number of arguments, two for each
* upvalue. The first is true if the variable being captured is a local (as
* opposed to an upvalue), and the second is the index of the local or
* upvalue being captured.
*
* Pushes the created closure.
*/
CODE_CLOSURE,// 1
/**
* @brief Creates a new instance of a class.
*
* Assumes the class object is in slot zero, and replaces it with the new
* uninitialized instance of that class. This opcode is only emitted by the
* compiler-generated constructor metaclass methods.
*/
CODE_CONSTRUCT,// 0
/**
* @brief Creates a new instance of a outer class.
*
* Assumes the class object is in slot zero, and replaces it with the new
* uninitialized instance of that class. This opcode is only emitted by the
* compiler-generated constructor metaclass methods.
*/
CODE_OUTER_CONSTRUCT,// 0
/**
* @brief Creates a class. Top of stack is the superclass. Below that is a string for
* the name of the class. Byte [arg] is the number of fields in the class.
*/
CODE_CLASS,// -1
/**
* @brief Ends a class.
*
* Atm the stack contains the class and the ClassAttributes (or null).
*/
CODE_END_CLASS,// -2
/**
* @brief Creates a outer class. Top of stack is the superclass. Below that is a
* string for the name of the class.
*/
CODE_OUTER_CLASS,// -1
/**
* @brief Define a method for symbol [arg]. The class receiving the method is popped
* off the stack, then the function defining the body is popped.
*
* If a outer method is being defined, the "function" will be a string
* identifying the outer method. Otherwise, it will be a function or
* closure.
*/
CODE_METHOD_INSTANCE,// -2
/**
* @brief Define a method for symbol [arg]. The class whose metaclass will receive
* the method is popped off the stack, then the function defining the body is
* popped.
*
* If a outer method is being defined, the "function" will be a string
* identifying the outer method. Otherwise, it will be a function or
* closure.
*/
CODE_METHOD_STATIC,// -2
/**
* @brief This is executed at the end of the module's body. Pushes NULL onto the stack
* as the "return value" of the import statement and stores the module as the
* most recently imported one.
*/
CODE_END_MODULE,// 1
/**
* @brief Import a module whose name is the string stored at [arg] in the constant
* table.
*
* Pushes null onto the stack so that the fiber for the imported module can
* replace that with a dummy value when it returns. (Fibers always return a
* value when resuming a caller.)
*/
CODE_IMPORT_MODULE,// 1
/**
* @brief Import a variable from the most recently imported module. The name of the
* variable to import is at [arg] in the constant table. Pushes the loaded
* variable's value.
*/
CODE_IMPORT_VARIABLE,// 1
/**
* @brief This pseudo-instruction indicates the end of the bytecode. It should
* always be preceded by a `CODE_RETURN`, so is never actually executed.
*/
CODE_END,// 0